const { prisma } = require("../prisma/prisma-client");

const CartController = {
  addToCart: async (req, res) => {
    const { productId, variantId, size, quantity } = req.body;
    const userId = req.user.userId;

    if (!productId || !variantId || !size) {
      return res.status(400).json({
        error: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: productId, variantId –∏–ª–∏ size",
      });
    }

    const requestedQty = Number(quantity) > 0 ? Number(quantity) : 1;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
      const product = await prisma.product.findUnique({
        where: { id: productId },
      });
      if (!product) {
        return res.status(404).json({ error: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      const variant = await prisma.productVariant.findUnique({
        where: { id: variantId },
      });
      if (!variant) {
        return res.status(404).json({ error: "–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
      const sizeEntry = variant.sizes.find((s) => s.size === size);
      if (!sizeEntry) {
        return res
          .status(400)
          .json({ error: `–†–∞–∑–º–µ—Ä ${size} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞` });
      }

      const availableQty = sizeEntry.quantity;

      // –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É
      let cart = await prisma.cart.findFirst({
        where: { userId },
        include: { items: true },
      });

      if (!cart) {
        cart = await prisma.cart.create({
          data: {
            userId,
            items: { create: [] },
          },
          include: { items: true },
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Å —Ç–µ–º –∂–µ —Ä–∞–∑–º–µ—Ä–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const existingItem = cart.items.find(
        (item) =>
          item.productId === productId &&
          item.variantId === variantId &&
          item.size === size
      );

      if (existingItem) {
        const totalAfterAdd = existingItem.quantity + requestedQty;
        const finalQuantity = Math.min(totalAfterAdd, availableQty);

        await prisma.cartItem.update({
          where: { id: existingItem.id },
          data: { quantity: finalQuantity },
        });
      } else {
        const finalQuantity = Math.min(requestedQty, availableQty);

        await prisma.cartItem.create({
          data: {
            cartId: cart.id,
            productId,
            variantId,
            size,
            quantity: finalQuantity,
          },
        });
      }

      // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞
      const updatedCart = await prisma.cart.findUnique({
        where: { id: cart.id },
        include: {
          items: {
            include: {
              product: {
                include: {
                  variants: { include: { images: true } },
                },
              },
            },
          },
        },
      });

      res.json(updatedCart);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
      res
        .status(500)
        .json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  removeFromCart: async (req, res) => {
    const { itemId } = req.body;
    const userId = req.user.userId;

    if (!itemId) {
      return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã" });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const cartItem = await prisma.cartItem.findUnique({
        where: { id: itemId },
        include: { cart: true },
      });

      if (!cartItem || cartItem.cart.userId !== userId) {
        return res
          .status(404)
          .json({ error: "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
      }

      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
      await prisma.cartItem.delete({
        where: { id: itemId },
      });

      res.json({ message: "–¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCart: async (req, res) => {
    const userId = req.user.userId;

    try {
      const cart = await prisma.cart.findFirst({
        where: { userId },
        include: {
          items: {
            include: {
              product: {
                include: {
                  discounts: true, // üîπ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
                  variants: {
                    include: {
                      images: true,
                      sizes: true,
                      discounts: true, // üîπ —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    },
                  },
                },
              },
            },
          },
        },
      });

      if (!cart) {
        return res.status(404).json({ error: "–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      res.json(cart);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã" });
    }
  },

  updateQuantity: async (req, res) => {
    const { itemId, action } = req.body;
    const userId = req.user.userId;

    if (!itemId || !["increment", "decrement"].includes(action)) {
      return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞" });
    }

    try {
      const item = await prisma.cartItem.findUnique({
        where: { id: itemId },
        include: {
          cart: true,
          product: {
            include: {
              variants: true, // –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ variantId
            },
          },
        },
      });

      if (!item || item.cart.userId !== userId) {
        return res
          .status(404)
          .json({ error: "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
      }

      // –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ variantId
      const variant = await prisma.productVariant.findUnique({
        where: { id: item.variantId },
      });

      if (!variant) {
        return res.status(404).json({ error: "–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ variant.sizes
      const sizeEntry = variant.sizes.find((s) => s.size === item.size);

      if (!sizeEntry) {
        return res.status(400).json({
          error: `–†–∞–∑–º–µ—Ä ${item.size} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞`,
        });
      }

      if (action === "increment") {
        if (item.quantity >= sizeEntry.quantity) {
          return res.status(400).json({
            error: `–ù–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ ${sizeEntry.quantity} —à—Ç. —Ä–∞–∑–º–µ—Ä–∞ ${item.size}`,
          });
        }

        await prisma.cartItem.update({
          where: { id: itemId },
          data: { quantity: item.quantity + 1 },
        });
      } else {
        if (item.quantity > 1) {
          await prisma.cartItem.update({
            where: { id: itemId },
            data: { quantity: item.quantity - 1 },
          });
        } else {
          await prisma.cartItem.delete({ where: { id: itemId } });
        }
      }

      const updatedCart = await prisma.cart.findUnique({
        where: { id: item.cartId },
        include: {
          items: {
            include: {
              product: {
                include: {
                  variants: {
                    include: { images: true, sizes: true },
                  },
                },
              },
            },
          },
        },
      });

      res.json(updatedCart);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
    }
  },
};

module.exports = CartController;
