generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  password          String
  email             String     @unique
  role              UserRole   @default(CLIENT)
  name              String
  phone             String?
  avatarUrl         String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  refreshToken      String?
  isActivated       Boolean    @default(false)
  activatedLink     String     @unique
  products          Product[]
  likes             Like[]
  comments          Comment[]
  chat              Chat[]
  UserChat          UserChat[]
  Message           Message[]
  cart              Cart[]
  purchasedProducts String[]   @db.ObjectId // üîπ –ú–∞—Å—Å–∏–≤ ID –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  orders            Order[] // üîπ –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–∞–º–∏
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  userId      String           @db.ObjectId
  user        User             @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
  sex         String
  model       String
  age         String 
  variants    ProductVariant[] // üëâ —Å–≤—è–∑—å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
  likes       Like[]
  comments    Comment[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model ProductVariant {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  productId String         @db.ObjectId
  product   Product        @relation(fields: [productId], references: [id])
  color     String // üëâ –¶–≤–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
  images    ProductImage[] // üëâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
  sizes     SizeEntry[] // üëâ –†–∞–∑–º–µ—Ä—ã –∏ –Ω–∞–ª–∏—á–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
  orderItems OrderItem[] @relation(name: "OrderItemToVariant")
}

model ProductImage {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  variantId String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

type SizeEntry {
  size     String
  quantity Int
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  variantId String   @db.ObjectId 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  size String
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  visible   Boolean  @default(false)
  createdAt DateTime @default(now()) // üîπ –ù–æ–≤–æ–µ –ø–æ–ª–µ
}

// model Like {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String  @db.ObjectId
//   user      User    @relation(fields: [userId], references: [id])
//   productId String  @db.ObjectId
//   product   Product @relation(fields: [productId], references: [id])
// }

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  rating Int @default(1) // –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5
}

enum DeliveryMethod {
  pickup
  courier
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]
  totalPrice      Float
  status          String // –ü—Ä–∏–º–µ—Ä: "pending", "shipped", "delivered"
  deliveryMethod  DeliveryMethod
  deliveryAddress String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model OrderItem {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String         @db.ObjectId
  order      Order          @relation(fields: [orderId], references: [id])
  productId  String         @db.ObjectId
  product    Product        @relation(fields: [productId], references: [id])
  variantId  String         @db.ObjectId
  variant ProductVariant @relation(name: "OrderItemToVariant", fields: [variantId], references: [id])
  quantity   Int
  size       String
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      UserChat[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId
}

model UserChat {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  Chat   Chat?   @relation(fields: [chatId], references: [id])
  chatId String? @db.ObjectId
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String?  @db.ObjectId
}
