// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  password      String
  email         String     @unique
  role          UserRole   @default(CLIENT)
  name          String
  phone         String?
  avatarUrl     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  refreshToken  String
  isActivated   Boolean    @default(false)
  activatedLink String     @unique
  products      Product[]
  likes         Like[]
  comments      Comment[]
  chat          Chat[]
  UserChat      UserChat[]
  Message       Message[]
  cart          Cart[]
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  avatarUrl   String?
  likes       Like[]
  comments    Comment[]
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  cartItems   CartItem[] // Связь через промежуточную таблицу CartItem
  createdAt   DateTime   @default(now())
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      UserChat[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId
}

model UserChat {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  Chat   Chat?   @relation(fields: [chatId], references: [id])
  chatId String? @db.ObjectId
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String?  @db.ObjectId
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[] // Связь через промежуточную таблицу CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
